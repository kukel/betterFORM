<!--
  ~ Copyright (c) 2011. betterForm Project - http://www.betterform.de
  ~ Licensed under the terms of BSD License
  -->

<xbl:xbl xmlns:xbl="http://betterform.de/ns/xbl"
         xmlns:xf="http://www.w3.org/2002/xforms"
         xmlns="http://www.w3.org/1999/xhtml"
         xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
        xmlns:bfb="http://betterform.de/binding">

    <!--
      ~ Copyright (c) 2010. betterForm Project - http://www.betterform.de
      ~ Licensed under the terms of BSD License
      author: joern turner
    -->

    <!-- ##### STATUS
    simple input mapping should work
    basic groups should work
    todo: next steps
    -parameter passing from incoming element to shadow content
    ##### -->

    <!-- used in stylesheet generation to build include the base stylesheet (useragent stylesheet) -->
    <bfb:resources>
        <bfb:xslt id="dojo" href="dojo.xsl"/>
    </bfb:resources>

    <!-- general script functions used by the bindings. May be used to put the libs to be loaded ?-->
    <xbl:script>
        function publish(topic, args) {
            fluxProcessor.publish(topic, args);
        }
    </xbl:script>

    <!-- #################################### BINDING TEMPLATE ####################################

    Notes:
    - @element is used to select the bound element with XPath. In xbl CSS matcher are used instead.
    - @type, @appearance + @mediatype are pre-defined attributes that can be used to select a binding.
    Custom attributes can be added and will be used to match elements to bind.

    The markup below shows the sections available in a binding (as far as they are considered by this implementation):
    - xsl:template holds the content

    <xbl:binding element="[qualified name of element e.g. xf:input]"
                 type="boolean"
                 appearance="*"
                 mediatype="text/html">

        <xbl:template>
        </xbl:template>

        <xbl:implementation>
        </xbl:implementation>

        <xbl:handlers>
            <xbl:handler>
            </xbl:handler>
        </xbl:handlers>

        <xbl:resources>
            <style>
            </style>
        </xbl:resources>

    </xbl:binding>
    #################################### -->

    <!-- #################################### BINDINGS ############################## -->
    <!-- #################################### BINDINGS ############################## -->
    <!-- #################################### BINDINGS ############################## -->


    <xbl:binding element="xf:dialog">
    </xbl:binding>

    <!-- ########################

        Use Case 1: simple control mapping equivalent to the transform that is done at rendering time
        Status: should work

    ######################## -->
    <xbl:binding element="xf:input">
        <xbl:template>
            <div id="{@id}" dojoType="betterform.ui.Control"
                 xmlns="http://www.w3.org/1999/xhtml">
                <!-- xf:label will handled here - apply-binding-sheets is used to signal that this element itself has to
                be processed instead of just inserted as is. (in XSLT apply-templates versus value-of resp. copy) -->
                <!--<xsl:apply-templates select="xf:label"/>-->
                <div class="myFlashyLabel">
                    <xbl:content includes="xf:label" apply-binding-sheets="true"/>
                </div>
                <input type="text" id="{@id}-value" class="xfValue"/>
                <xbl:content includes="xf:alert" apply-binding-sheets="true"/>
                <xbl:content includes="xf:hint" apply-binding-sheets="true"/>
                <xbl:content includes="xf:help" apply-binding-sheets="true"/>
            </div>
        </xbl:template>
        <!--
        -->
<!--
        <xbl:handlers>
            <xbl:handler event="onClick">
                fluxProcessor.setControlValue();
            </xbl:handler>
        </xbl:handlers>
-->

    </xbl:binding>


    <xbl:binding element="xf:group" appearance="compact">
    </xbl:binding>

    <xbl:binding element="xf:group" appearance="minimal">
    </xbl:binding>

    <!-- ########################

        Use Case 2: binding for container control
        Status: should work

        Notes:
        this use case shows how to iterate the input DOM to create shadowContent with xbl:content element.
        If the xbl:content element has children it is assumed that @includes points to a nodeset that will be iterated
        to create content.

    ######################## -->
    <xbl:binding element="xf:group" appearance="full">
        <xbl:template>
            <div id="{@id}" class="myCustomGroup" dojoType="betterform.ui.container.Group">
                <!-- xf:label will handled here - apply-binding-sheets is used to signal that this element itself has to
                be processed instead of just inserted as is. (in XSLT apply-templates versus value-of resp. copy) -->
                <xbl:content includes="xf:label" apply-binding-sheets="true"/>

                <table>
                    <xbl:content includes="*[exists(xf:label)]">
                        <tr>
                            <td>
                                <xbl:content includes="xf:label" apply-binding-sheets="true"/>
                            </td>
                            <td>
                                <xbl:content includes="."  apply-binding-sheets="true"/>
                            </td>
                        </tr>
                    </xbl:content>
                </table>

            </div>
        </xbl:template>
    </xbl:binding>

    <!-- ########################

        Use Case 3: create a component containing XForms markup
        Status: does not work yet

        Notes:
        This kind of components cannot be supported through binding at runtime as this would require to inject
        XForms objects into the XForms processor at rendering time. But at this time the init of the processor has
        already taken place and initializing new objects from within the transformation seems to be neither elegant nor
        good architecture.

        Solution:
        Bindings that contain XForms markup can be applied before runtime (maybe even at deployment time).

    ######################## -->
    <xbl:binding element="xf:group" appearance="repeat">
        <xbl:template>
            <div id="{@id}" class="myCustomGroup" dojoType="betterform.ui.container.Group"
                 xmlns="http://www.w3.org/1999/xhtml">
                <xf:repeat nodeset="" id="{@id}" appearance="compact">
                    <xbl:content includes="*" apply-binding-sheets="true"/>
                </xf:repeat>
            </div>
        </xbl:template>
    </xbl:binding>


    <xbl:binding element="xf:input" type="string" appearance="*">
    </xbl:binding>

    <xbl:binding element="xf:input" type="boolean" appearance="*">
    </xbl:binding>

    <xbl:binding element="xf:input" type="dateTime" appearance="*" mediatype="*"/>

    <xbl:binding element="xf:output" type="boolean" appearance="*" mediatype="text/html">
    </xbl:binding>

    <xbl:binding element="xf:output" type="*" appearance="*" mediatype="text/html">
    </xbl:binding>

    <xbl:binding element="xf:range" type="*" appearance="*">
    </xbl:binding>

    <xbl:binding element="xf:secret">
    </xbl:binding>

    <xbl:binding element="xf:select" appearance="*">
    </xbl:binding>

    <xbl:binding element="xf:select1" appearance="*">
    </xbl:binding>

    <xbl:binding element="xf:repeat" appearance="full">
    </xbl:binding>

    <xbl:binding element="xf:repeat" appearance="minimal">
    </xbl:binding>

    <xbl:binding element="xf:repeat" appearance="compact">
    </xbl:binding>

    <xbl:binding element="xf:repeat" appearance="*">
    </xbl:binding>

    <xbl:binding element="xf:submit">
    </xbl:binding>

    <xbl:binding element="xf:switch" appearance="bf:tabContainer">
    </xbl:binding>

    <xbl:binding element="xf:switch" appearance="*">
    </xbl:binding>

    <xbl:binding element="xf:textarea" appearance="*" mediatype="text/html">
    </xbl:binding>

    <xbl:binding element="xf:trigger" appearance="*">
    </xbl:binding>

    <xbl:binding element="xf:upload" type="anyURI">
    </xbl:binding>

    <xbl:binding element="xf:upload" type="hexBinary">
    </xbl:binding>

    <xbl:binding element="xf:upload" type="base64Encoded">
    </xbl:binding>


</xbl:xbl>

